/* Generated By:JavaCC: Do not edit this line. FieldValueExpressionParserConstants.java */
package com.jm.wf.events.expressions.parsers;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FieldValueExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BIT_OR = 5;
  /** RegularExpression Id. */
  int BIT_XOR = 6;
  /** RegularExpression Id. */
  int BIT_AND = 7;
  /** RegularExpression Id. */
  int LSHIFT = 8;
  /** RegularExpression Id. */
  int RSHIFT = 9;
  /** RegularExpression Id. */
  int PLUS = 10;
  /** RegularExpression Id. */
  int MINUS = 11;
  /** RegularExpression Id. */
  int MULTIPLY = 12;
  /** RegularExpression Id. */
  int DIVIDE = 13;
  /** RegularExpression Id. */
  int MODULUS = 14;
  /** RegularExpression Id. */
  int POWER = 15;
  /** RegularExpression Id. */
  int BIT_NOT = 16;
  /** RegularExpression Id. */
  int LOG_OR = 17;
  /** RegularExpression Id. */
  int LOG_AND = 18;
  /** RegularExpression Id. */
  int LOG_EQ = 19;
  /** RegularExpression Id. */
  int LOG_NE = 20;
  /** RegularExpression Id. */
  int LOG_LT = 21;
  /** RegularExpression Id. */
  int LOG_LTE = 22;
  /** RegularExpression Id. */
  int LOG_GT = 23;
  /** RegularExpression Id. */
  int LOG_GTE = 24;
  /** RegularExpression Id. */
  int LOG_NOT = 25;
  /** RegularExpression Id. */
  int COND_TRUE = 26;
  /** RegularExpression Id. */
  int COND_FALSE = 27;
  /** RegularExpression Id. */
  int ASSIGN = 28;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 29;
  /** RegularExpression Id. */
  int MINUS_ASSIGN = 30;
  /** RegularExpression Id. */
  int MULT_ASSIGN = 31;
  /** RegularExpression Id. */
  int DIVIDE_ASSIGN = 32;
  /** RegularExpression Id. */
  int MOD_ASSIGN = 33;
  /** RegularExpression Id. */
  int AND_ASSIGN = 34;
  /** RegularExpression Id. */
  int OR_ASSIGN = 35;
  /** RegularExpression Id. */
  int XOR_ASSIGN = 36;
  /** RegularExpression Id. */
  int LSHIFT_ASSIGN = 37;
  /** RegularExpression Id. */
  int RSHIFT_ASSIGN = 38;
  /** RegularExpression Id. */
  int LPAREN = 39;
  /** RegularExpression Id. */
  int RPAREN = 40;
  /** RegularExpression Id. */
  int SEMI_COLON = 41;
  /** RegularExpression Id. */
  int DOT = 42;
  /** RegularExpression Id. */
  int FLD_CAT = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int LBRACE = 45;
  /** RegularExpression Id. */
  int RBRACE = 46;
  /** RegularExpression Id. */
  int LBRACKET = 47;
  /** RegularExpression Id. */
  int RBRACKET = 48;
  /** RegularExpression Id. */
  int INTEGER = 49;
  /** RegularExpression Id. */
  int REAL = 50;
  /** RegularExpression Id. */
  int HEXNUM = 51;
  /** RegularExpression Id. */
  int IDENTIFIER = 52;
  /** RegularExpression Id. */
  int VAR_NAME = 53;
  /** RegularExpression Id. */
  int MTHD_NAME = 54;
  /** RegularExpression Id. */
  int QSTRING_LITERAL = 55;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "<LSHIFT>",
    "<RSHIFT>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "<POWER>",
    "\"~\"",
    "<LOG_OR>",
    "<LOG_AND>",
    "<LOG_EQ>",
    "<LOG_NE>",
    "\"<\"",
    "<LOG_LTE>",
    "\">\"",
    "<LOG_GTE>",
    "\"!\"",
    "\"?\"",
    "\":\"",
    "\"=\"",
    "<PLUS_ASSIGN>",
    "<MINUS_ASSIGN>",
    "<MULT_ASSIGN>",
    "<DIVIDE_ASSIGN>",
    "<MOD_ASSIGN>",
    "<AND_ASSIGN>",
    "<OR_ASSIGN>",
    "<XOR_ASSIGN>",
    "<LSHIFT_ASSIGN>",
    "<RSHIFT_ASSIGN>",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\".\"",
    "<FLD_CAT>",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<INTEGER>",
    "<REAL>",
    "<HEXNUM>",
    "<IDENTIFIER>",
    "<VAR_NAME>",
    "<MTHD_NAME>",
    "<QSTRING_LITERAL>",
  };

}
